/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.eshop.eshopping.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.eshop.eshopping.service.ItemorderService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.eshop.eshopping.*;
import com.eshop.eshopping.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Itemorder.
 * @see com.eshop.eshopping.Itemorder
 */
@RestController(value = "Eshopping.ItemorderController")
@RequestMapping("/eshopping/Itemorder")
@Api(description = "Exposes APIs to work with Itemorder resource.", value = "ItemorderController")
public class ItemorderController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ItemorderController.class);

    @Autowired
    @Qualifier("eshopping.ItemorderService")
    private ItemorderService itemorderService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Itemorder instances matching the search criteria.")
    public Page<Itemorder> findItemorders(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Itemorders list");
        return itemorderService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Itemorder instances.")
    public Page<Itemorder> getItemorders(Pageable pageable) {
        LOGGER.debug("Rendering Itemorders list");
        return itemorderService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Itemorder instance associated with the given id.")
    public Itemorder getItemorder(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Itemorder with id: {}", id);
        Itemorder instance = itemorderService.findById(id);
        LOGGER.debug("Itemorder details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Itemorder instance associated with the given id.")
    public boolean deleteItemorder(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Itemorder with id: {}", id);
        Itemorder deleted = itemorderService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Itemorder instance associated with the given id.")
    public Itemorder editItemorder(@PathVariable("id") Integer id, @RequestBody Itemorder instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Itemorder with id: {}", instance.getId());
        instance.setId(id);
        instance = itemorderService.update(instance);
        LOGGER.debug("Itemorder details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Itemorder instance.")
    public Itemorder createItemorder(@RequestBody Itemorder instance) {
        LOGGER.debug("Create Itemorder with information: {}", instance);
        instance = itemorderService.create(instance);
        LOGGER.debug("Created Itemorder with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setItemorderService(ItemorderService service) {
        this.itemorderService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Itemorder instances.")
    public Long countAllItemorders() {
        LOGGER.debug("counting Itemorders");
        Long count = itemorderService.countAll();
        return count;
    }
}
